#!/usr/pkg/bin/python3.7
#

from argparse import ArgumentParser

import os
import os.path as path
import pwd
import re
import six
import subprocess
import yaml

sudoers_dir = '/usr/pkg/etc/sudoers.d'

def setup_user_keys(keys, name):
    # Make sure the users .ssh dir is setup accordingly
    pwent = pwd.getpwnam(name)
    ssh_dir = path.join(pwent.pw_dir, '.ssh')
    if not path.isdir(ssh_dir):
        os.mkdir(ssh_dir)
        os.chmod(ssh_dir, 0o700)
        os.chown(ssh_dir, pwent.pw_uid, pwent.pw_gid)

    filename = path.join(ssh_dir, 'authorized_keys')
    with open(filename, 'w') as f:
        for key in keys:
            print(key, file=f)

# Swiped from https://github.com/canonical/cloud-init/blob/master/cloudinit/util.py
def is_user(name):
    try:
        if pwd.getpwnam(name):
            return True
    except KeyError:
        return False

def add_user(user):
    name = user['name']
    if is_user(name):
        print('User', name, 'already exists, skipping.')
        return

    useradd_cmd = ['useradd']
    useradd_opts = {
        "homedir": '-d',
        "gecos": '-c',
        "primary_group": '-g',
        "groups": '-G',
        "shell": '-s',
        "inactive": '-E',
    }

    # NetBSD doesn't allow spaces in the comma separated list of
    # secondary groups, but I dont want to make cloud-config
    # authors cope with that.
    if 'groups' in user:
        user['groups'] = re.sub(r'\s+', '', user['groups'])
    
    for key, val in user.items():
        if (key in useradd_opts and val and
           isinstance(val, six.string_types)):
            useradd_cmd.extend([useradd_opts[key], val])

    useradd_cmd.extend(['-m', name])

    print('Adding user', name)
    subprocess.run(useradd_cmd)

    if 'sudo' in user:
        filename = path.join(sudoers_dir, 'user-%s' % name)
        with open(filename, 'w') as f:
            print(name, user['sudo'], file=f)

    if 'ssh_authorized_keys' in user:
        setup_user_keys(user['ssh_authorized_keys'], name)
            

def main():
    parser = ArgumentParser(
        description='Process a #cloud-config yaml file')
    parser.add_argument(
        '-c', '--config', help='Path to the #cloud-config yaml file',
        required=True)
    
    args = parser.parse_args()

    with open(args.config, 'r') as f:
        cfg = yaml.safe_load(f)

        if cfg and 'users' in cfg:
            for user in cfg['users']:
                add_user(user)

if __name__ == '__main__':
    main()
